// src/pages/ProfilePage.jsx
import React, { useState, useEffect, useContext, useCallback } from 'react';
import { AuthContext, useAuth } from '../context/AuthContext'; // <-- ƒê∆∞·ªùng d·∫´n AuthContext
import { getUserProfile, updateUserProfile } from '../api/profileApi'; // <-- Import h√†m API
import ProfileDisplay from '../components/Profile/ProfileDisplay'; // <-- Import component hi·ªÉn th·ªã
import ProfileUpdateForm from '../components/Profile/ProfileUpdateForm'; // <-- Import component form

function Profile() {
  // S·ª≠ d·ª•ng Context ƒë·ªÉ l·∫•y user v√† token
    const { currentUser: loggedInUser, token, isAuthenticated, loading, logout } = useAuth(); // L·∫•y th√™m isAuthenticated v√† loading
    console.log("ProfilePage Render - loggedInUser:", loggedInUser, "isAuthenticated:", isAuthenticated, "loading:", loading);

  console.log("ProfilePage Render - loggedInUser:", loggedInUser);
  console.log("ProfilePage Render - token:", token);

  // State cho d·ªØ li·ªáu profile fetch t·ª´ API
  const [profileData, setProfileData] = useState(null);
  // State cho tr·∫°ng th√°i loading chung c·ªßa trang
  const [isLoadingPage, setIsLoadingPage] = useState(true);
  // State cho tr·∫°ng th√°i loading c·ªßa vi·ªác update
  const [isUpdating, setIsUpdating] = useState(false);
   // State cho th√¥ng b√°o l·ªói v√† th√†nh c√¥ng
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');

  // --- H√†m Fetch Profile (s·ª≠ d·ª•ng useCallback ƒë·ªÉ t·ªëi ∆∞u) ---
  const fetchProfile = useCallback(async () => {
    if (loggedInUser && loggedInUser.user_id && token) {
      setIsLoadingPage(true);
      setError('');
      try {
        console.log(`Fetching profile for user ID: ${loggedInUser.user_id}`);
        const data = await getUserProfile(loggedInUser.user_id , token); // token ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi interceptor
        console.log("Profile data received:", data);
        setProfileData(data);
      } catch (err) {
         console.error('Fetch profile error:', err);
        const errorMessage = err.message || err.error || 'Failed to fetch profile.';
        setError(errorMessage);
        // T·ª± ƒë·ªông logout n·∫øu l·ªói 401
        if ((err.status === 401 || err.statusCode === 401) && logout) {
          logout();
        }
      } finally {
        setIsLoadingPage(false);
      }
    } else {
       // N·∫øu kh√¥ng c√≥ user ho·∫∑c token, kh√¥ng fetch v√† b√°o l·ªói/chuy·ªÉn h∆∞·ªõng
       console.log("User not authenticated, cannot fetch profile.");
      setError('User not authenticated. Please log in.');
      setIsLoadingPage(false);
    }
  }, [loggedInUser, token, logout]); // Dependencies cho useCallback

  // --- Effect ƒë·ªÉ g·ªçi fetchProfile khi component mount ho·∫∑c user/token thay ƒë·ªïi ---
  useEffect(() => {
    fetchProfile();
  }, [fetchProfile]); // Ch·ªâ c·∫ßn fetchProfile l√†m dependency v√¨ n√≥ ƒë√£ c√≥ dependencies c·ªßa n√≥

  // --- H√†m x·ª≠ l√Ω khi Form Update ƒë∆∞·ª£c Submit ---
  const handleProfileUpdate = async (updatePayload) => {
     setIsUpdating(true); // B·∫Øt ƒë·∫ßu tr·∫°ng th√°i loading cho vi·ªác update
     setError('');
     setSuccessMessage('');

     if (!loggedInUser || !loggedInUser.user_id /*|| !token*/) {
         setError("Authentication error.");
         setIsUpdating(false);
         return false; // B√°o hi·ªáu th·∫•t b·∫°i
     }

     try {
        console.log(`Updating profile for user ID: ${loggedInUser.user_id} with payload:`, updatePayload);
        // G·ªçi h√†m API update (token ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi interceptor)
        const updatedUser = await updateUserProfile(loggedInUser.user_id, updatePayload /*, token */);

        console.log("Profile update response:", updatedUser);

        // X·ª≠ l√Ω response t·ª´ API update
        if (updatedUser && updatedUser.user_id) { // N·∫øu API tr·∫£ v·ªÅ user ƒë√£ c·∫≠p nh·∫≠t
            setProfileData(updatedUser); // C·∫≠p nh·∫≠t state hi·ªÉn th·ªã
            setLoggedInUserInContext(prev => ({...prev, ...updatedUser})); // C·∫≠p nh·∫≠t context global
            setSuccessMessage('Profile updated successfully!');
            setTimeout(() => setSuccessMessage(''), 3000); // X√≥a th√¥ng b√°o sau 3s
            return true; // B√°o hi·ªáu th√†nh c√¥ng
        } else if (updatedUser && updatedUser.message) { // N·∫øu API ch·ªâ tr·∫£ v·ªÅ message
             setSuccessMessage(updatedUser.message);
             // C√≥ th·ªÉ c·∫ßn g·ªçi l·∫°i fetchProfile n·∫øu API kh√¥ng tr·∫£ v·ªÅ user m·ªõi
             if (updatedUser.needsRefetch) {
                 await fetchProfile(); // G·ªçi l·∫°i ƒë·ªÉ l·∫•y data m·ªõi nh·∫•t
             }
             setTimeout(() => setSuccessMessage(''), 3000);
             return true;
        } else {
            // Tr∆∞·ªùng h·ª£p kh√¥ng mong mu·ªën
             throw new Error("Received unexpected response after update.");
        }

     } catch (err) {
        console.error('Update profile error:', err);
        const errorMessage = err.message || err.error || 'Failed to update profile.';
        setError(errorMessage);
        setTimeout(() => setError(''), 5000); // X√≥a l·ªói sau 5s
        return false; // B√°o hi·ªáu th·∫•t b·∫°i
     } finally {
        setIsUpdating(false); // K·∫øt th√∫c tr·∫°ng th√°i loading update
     }
  };

  // --- Render Logic ---
  if (isLoadingPage) {
    return <div className="flex justify-center items-center h-screen">Loading profile...</div>;
  }

  // Hi·ªÉn th·ªã l·ªói n·∫øu kh√¥ng fetch ƒë∆∞·ª£c profile ban ƒë·∫ßu V√Ä kh√¥ng c√≥ profileData
  if (error && !profileData) {
     return (
        <div className="flex flex-col justify-center items-center h-screen text-red-500">
            <p>{error}</p>
            {/* C√≥ th·ªÉ th√™m n√∫t th·ª≠ l·∫°i ho·∫∑c n√∫t logout */}
            {logout && <button onClick={logout} className="mt-4 px-4 py-2 bg-gray-500 text-white rounded shadow hover:bg-gray-600">Logout</button>}
        </div>
    );
  }

  // Tr∆∞·ªùng h·ª£p ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c context ch∆∞a s·∫µn s√†ng
  if (!loggedInUser) {
       return <div className="flex justify-center items-center h-screen">Please log in to view your profile.</div>;
  }

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-700">
      {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói/th√†nh c√¥ng to√†n c·ª•c */}
       {successMessage && <div className="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4 mx-4 mt-4 rounded" role="alert">{successMessage}</div>}
       {error && <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 mx-4 mt-4 rounded" role="alert">{error}</div>}


      {/* Ph·∫ßn hi·ªÉn th·ªã profile */}
      <ProfileDisplay profileData={profileData} />

      {/* Ph·∫ßn form c·∫≠p nh·∫≠t */}
      <ProfileUpdateForm
          initialData={profileData} // Truy·ªÅn d·ªØ li·ªáu profile hi·ªán t·∫°i
          onSubmit={handleProfileUpdate} // Truy·ªÅn h√†m x·ª≠ l√Ω khi form submit
          isUpdating={isUpdating} // Truy·ªÅn tr·∫°ng th√°i loading c·ªßa vi·ªác update
      />

       {/* N√∫t Logout */}
       {logout && (
           <div className="text-center py-6">
               <button onClick={logout} className="px-4 py-2 bg-gray-500 text-white rounded shadow hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400">
                   Logout
               </button>
           </div>
       )}
    </div>
  );
}

export default function ProfilePage() {
  const [user, setUser] = useState(null);

  useEffect(() => {
    setTimeout(() => {
      setUser({
        backgroundImage: "/hero-img.png",
        imageUrl: "/team-1.png",
        altText: "Mia Taylor",
        name: "Mia Taylor",
        location: "New York City, NY",
        jobTitle: "Director - Museum of Modern Art",
        description: "üé® Art enthusiast creating vibrant masterpieces!",
      });
    }, 1000);
  }, []);

  return <Profile user={user} />;
}